@page "/CISSTask/createtask"
@attribute [Authorize]
@inject IAlertService AlertService
@inject ICISSTaskService CISSTaskService
@inject NavigationManager navManager
@inject Blazorcrud.Client.Shared.PageHistoryState PageHistoryState

<h1>Create Task</h1>
<br/>

<EditForm Model="@task" OnValidSubmit="@CreateCISSTask">
    <FluentValidator TValidator="CISSTaskValidator" />
    <div class="form-group">
        <label>File Name :</label>
        <div>
            <InputText @bind-Value="@task" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => task.TaskName)" />
        </div>
    </div>

    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading) 
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Save File
        </button>
        @if (PageHistoryState.CanGoBack()){
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Back</NavLink>
        }
        else{
            <NavLink href="/CISSTask/1" class="btn btn-link">Back</NavLink>
        }
    </div>

</EditForm>

@code {
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
    bool loading = false;
    string status = "File pending CISSTask...";

    CISSTask task = new CISSTask
        {
            TaskName = "",
            StartTimestamp = DateTime.Now,
            EndTimestamp = DateTime.Now,
            Comment = null;
    };


    async Task CreateCISSTask()
    {
        loading = true;
        try
        {
            await CISSTaskService.AddCISSTask(task);
            AlertService.Success("CISSTask added successfully", keepAfterRouteChange: true);
            if (PageHistoryState.CanGoBack()){
                navManager.NavigateTo(PageHistoryState.GetGoBackPage());
            }
            else{
                navManager.NavigateTo("/CISSTask/1");
            } 
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}